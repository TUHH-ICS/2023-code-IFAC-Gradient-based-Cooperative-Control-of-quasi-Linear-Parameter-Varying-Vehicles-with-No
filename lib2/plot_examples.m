%---------------------------------------------------------------------------------------------------
% For Paper
% "Gradient-based Cooperative Control ofquasi-Linear Parameter Varying Vehicleswith Noisy Gradients"
% by Adwait Datar, Antonio Mendez Gonzalez and Herbert Werner
% Copyright (c) Institute of Control Systems, Hamburg University of Technology. All rights reserved.
% Licensed under the GPLv3. See LICENSE in the project root for license information.
% Author(s): Adwait Datar
%---------------------------------------------------------------------------------------------------
% This script is used to plot the data generated by the
% Main_quadrotor_example.m to produce Fig. 3 from the above paper
clear
clc
save_data=0;
samples=100;
% Define quadrotor dynamics 
addpath(genpath('.\lib2\vehicles\quadrotor'))
dim=2;% spatial dimension (of positions and velocities)

% Current implementation only supports dim=2 for quadrotors
kp=1; % gains for the pre-filter
kd= 4:2:30;
n_kd=length(kd);
%% Setup optimization

% Noise bounds
delta_1_all=[0,0.5]; % Multiplicative noise bound

% Generate example quadratic fields (Linear feedback) to test conservatism
alpha_best=zeros(size(delta_1_all,2),n_kd);
for counter=1:size(delta_1_all,2)
    delta_1=delta_1_all(1,counter);% Noise bounds

    % Sector bounds
    m=1; % lower bound on the sector
    L=10;  % Upper bound on the sector
    
    for i=1:n_kd
        G_veh=define_G_quad_wrapped(dim,kp,kd(i));  
        H=[m,0;0,L];
        % Generate 100 random perturbations and check the worst case in
        % these examples
        alpha_temp=100;        
        for j=1:samples
            DELTA=rand(2);
            DELTA=DELTA/norm(DELTA,2);
            H_noisy=(eye(2)+delta_1*DELTA)*H;
            G_cl=feedback(G_veh,H_noisy,-1);
            alpha_temp=min([alpha_temp,-1*max(real(pole(G_cl)))]);
        end        
        alpha_best(counter,i)=alpha_temp;
    end
    if save_data==1
        save('.\data\lb_lin');
    end
    
end
%% Plot data
figure()
hold on
plot(kd,alpha_best(1,:),'o')
plot(kd,alpha_best(2,:),'*')
ylim([0,0.15])
xlabel('k_d')
ylabel('\alpha')
legend('Examples with delta=0','Examples with delta=0.5')
title('Nominal Perf vs Noise robustness: ZF')

